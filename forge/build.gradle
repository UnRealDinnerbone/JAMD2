plugins {
    id "com.github.johnrengelman.shadow" version "5.0.0"
    id "com.matthewprenger.cursegradle"
}

configurations {
    shadowCommon
}

architectury {
    platformSetupLoomIde()
    forge()
}

loom {
    useFabricMixin = true
}

dependencies {
    forge "net.minecraftforge:forge:${parent.minecraft_version}-${parent.forge_version}"
    modApi "me.shedaniel:architectury-forge:${parent.architectury_version}"
    modCompile "me.shedaniel.cloth:cloth-config-forge:${parent.cloth_config_version}"


    implementation(project(path: parent.getProjectName("common"))) {
        transitive = false
    }
    developmentForge(project(path: parent.getProjectName("common"))) {
        transitive = false
    }
    shadowCommon(project(path: parent.getProjectName("common"), configuration: "transformProductionForge")) {
        transitive = false
    }
}

processResources {
    inputs.property "version", project.version

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }
}

shadowJar {
    exclude "fabric.mod.json"

    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier "forge"
}

jar {
    classifier "dev"
}

java {
    withSourcesJar()
}

sourcesJar {
    def commonSources = project(parent.getProjectName("common")).remapSourcesJar
    dependsOn commonSources
    from zipTree(commonSources.output)
}

curseforge {
    if (System.getenv().get('UNREAL_CURSE_API_KEY')){
        apiKey = System.getenv().get('UNREAL_CURSE_API_KEY')
    }
    project {
        id = parent.property("curseforge_id")
        changelog = getGitChangelog()
        changelogType = 'markdown'
        releaseType = parent.property("type")
        addGameVersion minecraft_version
        addGameVersion 'Forge'
//        relations {
//            requiredDependency 'architectury-forge'
//        }
    }
}




parent.tasks.getByName("curseforgePublish").dependsOn tasks.getByName("curseforge")
